#define NUM_DISTANCES 20
#define NUM_BIT_WORDS 1000

program

	var $userposition as handle
	//var $distancevalue as string
	var $positionint as real
	var $userspeed as handle
	var $speedvalue as string
	var $speedint as integer
	var $speed_degs as integer
	//var $sentence as string
	var $i as integer
	var $array_index as integer
	var $positions[NUM_DISTANCES] as real
	var $distances[NUM_DISTANCES] as real
	
	var $position_array[NUM_DISTANCES] as real  // Array to store positions
    var $char as string
    var $temp_str as string = ""
	var $position as string
	var $num_counts as real
    //var $distance_string as string = ""
	//var $j as integer

	// Open the file for reading.
	$userspeed = FileOpenText("UserSpeed.txt", FileMode.Read)
	$userposition = FileOpenText("UserPosition.txt", FileMode.Read)

	$speedvalue = FileTextReadLine($userspeed)
	$speedint = StringToInteger($speedvalue)
	$speed_degs = $speedint * 360
	//AppMessageDisplay(IntegerToString($speed_degs))

    // Read all lines from the user distance file and process them.
    while (true)
        $position = FileTextReadLine($userposition)
        if (StringEquals($position, ""))  // Break if there's no more data.
            break
        end

        // Manually split the line by commas and convert each part to an integer
			var $j as integer
			
			for $j = 0 to StringLength($position) - 1
			    $char = StringSubstring($position, $j, 1)  // Get each character
			
			    if (StringEquals($char, ","))  // If it's a comma, convert the collected string
			        $positionint = StringToReal($temp_str)  // Convert to real number
			        $position_array[$array_index] = $positionint  // Store in array
			        $array_index += 1
			        $temp_str = ""  // Reset the temp string
			    else
			        $temp_str += $char  // Collect characters into a temp string
			    end
			end	

        // Add the last number after the loop
        if StringLength($temp_str) > 0
            $positionint = StringToReal($temp_str)
            $position_array[$array_index] = $positionint  // Store in array
            $array_index += 1
        end
    end
	
	// Close the file.
	FileClose($userspeed)
	FileClose($userposition)

    var $axis as axis = Theta

    var $FixedTotalTime = 100	// time between the beginning of each pulses
    var $FixedOnTime = 100		// duration of output signal
    var $FixedCount = 1			// one pulse per event
	
    // Convert positions to counts
	$num_counts = 20000
    for $i = 0 to NUM_DISTANCES-1
        $positions[$i] = $position_array[$i]
		//AppMessageDisplay("Position (counts) " + RealToString($i) + ": " + RealToString($positions[$i]))
    end

	Enable($axis)
    // Move to first position (array is in counts, so convert to units for MoveLinear)
    Home($axis)
	MoveLinear($axis, CountsToUnits($axis, $positions[0] * ParameterGetAxisValue($axis, AxisParameter.PrimaryEmulatedQuadratureDivider)))
	
    // Reset internal PSO counters
    PsoReset($axis)
    SetupTaskTargetMode(TargetMode.Incremental)
	
    //****** PSO distance event module setup ******
    PsoDistanceConfigureInputs($axis, [PsoDistanceInput.iXC4PrimaryFeedback])
	//MoveFreerun($axis, $speed_degs)
	//PsoDistanceConfigureInputs($axis, [PsoDistanceInput.iXC4AuxiliaryFeedback])

    // Define user-settable array of distances
    //var $user_distances[NUM_DISTANCES] as real = [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]
	
	//var $user_distances[NUM_DISTANCES] as real = [1, 19, 37, 55, 73, 91, 109, 127, 145, 163, 181, 199, 217, 235, 253, 271, 289, 305, 325, 343]

    // Calculate distances
    for $i = 0 to NUM_DISTANCES-1
        $distances[$i] = Modulo($positions[Modulo($i+1, NUM_DISTANCES)] - $positions[$i], $num_counts)
		//AppMessageDisplay("Distance (counts) " + RealToString($i) + ": " + RealToString($distances[$i]))
    end

    // Write the distances to the drive array (expects counts)
	DriveArrayWrite($axis, $distances, 0, NUM_DISTANCES, DriveArrayType.PsoDistanceEventDistances)

    // Configure the distance module to generate an event at the distances specified in the drive array
    PsoDistanceConfigureArrayDistances($axis, 0, NUM_DISTANCES, true)  // Enable wrap-around
	
	PsoDistanceCounterOn($axis)
	PsoDistanceEventsOn($axis)

    //****** PSO waveform module setup (pulse) ******
    PsoWaveformConfigureMode($axis, PsoWaveformMode.Pulse)
    PsoWaveformConfigurePulseFixedTotalTime($axis, $FixedTotalTime)  // Total pulse time (microseconds)
    PsoWaveformConfigurePulseFixedOnTime($axis, $FixedOnTime)        // ON time (microseconds)
    PsoWaveformConfigurePulseFixedCount($axis, $FixedCount)          // Number of output events per pulse
    PsoWaveformApplyPulseConfiguration($axis)
	//PsoWaveformOn($axis)  // Ensure PSO waveform is turned on

    // Configure PSO output source and physical output pin
	//PsoWaveformOn($axis)  // Ensure PSO waveform is turned on
    //PsoOutputConfigureSource($axis, PsoOutputSource.Waveform)
    PsoOutputConfigureOutput($axis, PsoOutputPin.iXC4AuxiliaryMarkerSingleEnded)
	PsoOutputConfigureSource($axis, PsoOutputSource.Waveform)
	PsoWaveformOn($axis)


	// Write bit value word to drive array.
	var $bitValues[NUM_BIT_WORDS] as real
	//Dwell(10)
    for $i = 0 to 70
	    $bitValues[$i] = 0x0
	end
	Dwell(3)
	$bitValues[64] = 0x1
    for $i = 63 to NUM_BIT_WORDS-1
	    $bitValues[$i] = 0xFFFFFFFF
	end
	var $bitmaskAddress = 4*NUM_DISTANCES // move past where distances are written already
	DriveArrayWrite($axis, $bitValues, $bitmaskAddress, NUM_BIT_WORDS, DriveArrayType.PsoBitmapBits)

	// Configure bit data from drive array.
	PsoBitmapConfigureArray($axis, $bitmaskAddress, NUM_BIT_WORDS, false)
	
	PsoEventConfigureMask($axis, PsoEventMask.BitMask)
	MoveFreerun($axis, $speed_degs)
	//Dwell(3)
    //PsoOutputConfigureOutput($axis, PsoOutputPin.iXC4AuxiliaryMarkerSingleEnded)
	//Dwell(5)
    //MoveFreerun($axis, $speed_degs)
	Dwell(10)
	PsoEventConfigureMask($axis, 0)
end

function Modulo($value as real, $divisor as real) as real
	return $value - (Floor($value/$divisor)*$divisor)
end